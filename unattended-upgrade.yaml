---
- name: Manage unattended-upgrades during maintenance
  hosts: ubuntu
  become: true
  vars:
    uu_log_since: "2h"          # journal time window (e.g., '2h', 'today', '2025-09-19 12:00')
    uu_temp_stop: true          # set to false to only inspect without stopping
    uu_services:
      - unattended-upgrades.service
    uu_timers:
      - apt-daily.timer
      - apt-daily-upgrade.timer

  pre_tasks:
    - name: Show status of unattended-upgrades service
      ansible.builtin.systemd_service:
        name: unattended-upgrades.service
        state: started
        enabled: null
        daemon_reload: false
      check_mode: true
      register: uu_status

    - name: Show status of apt timers
      ansible.builtin.command: "systemctl status {{ item }}"
      register: timer_status
      changed_when: false
      loop: "{{ uu_timers }}"

    - name: Collect recent unattended-upgrades logs
      ansible.builtin.command: >
        journalctl -u unattended-upgrades
        --since "{{ uu_log_since }}"
        --no-pager
      register: uu_logs
      changed_when: false

    - name: Print unattended-upgrades status summary
      ansible.builtin.debug:
        msg:
          - "unattended-upgrades active (check-mode probe): {{ uu_status.status.ActiveState | default('unknown') }}"
          - "Timers probed: {{ uu_timers }}"
          - "Log window since: {{ uu_log_since }}"

    - name: Print unattended-upgrades logs (truncated)
      ansible.builtin.debug:
        msg: "{{ uu_logs.stdout | default('no logs') | truncate(4000, end='...') }}"

  tasks:
    - name: Optionally stop unattended-upgrades service before updates
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: unattended-upgrades.service
        state: stopped

    - name: Optionally stop apt timers during maintenance window
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: stopped
      loop: "{{ uu_timers }}"

    # Place update/upgrade tasks here (example commented out)
    # - name: Update apt cache with lock wait
    #   ansible.builtin.apt:
    #     update_cache: true
    #     cache_valid_time: 3600
    #     lock_timeout: 300
    # - name: Dist upgrade
    #   ansible.builtin.apt:
    #     upgrade: dist
    #     lock_timeout: 300

  post_tasks:
    - name: Start apt timers after maintenance
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
      loop: "{{ uu_timers }}"

    - name: Start unattended-upgrades service after maintenance
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: unattended-upgrades.service
        state: started

    - name: Show next runs for timers
      ansible.builtin.command: systemctl list-timers --all | sed -n '1,20p'
      changed_when: false
      register: list_timers

    - name: Print next timers
      ansible.builtin.debug:
        msg: "{{ list_timers.stdout }}"
