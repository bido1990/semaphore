---
- name: Manage unattended-upgrades during maintenance
  hosts: ubuntu_vms
  become: true
  vars:
    uu_log_since: "24h"
    uu_temp_stop: true
    uu_services:
      - unattended-upgrades.service
    uu_timers:
      - apt-daily.timer
      - apt-daily-upgrade.timer

  pre_tasks:
    - name: Show unattended-upgrades status (systemctl show)
      ansible.builtin.command: >
        systemctl show unattended-upgrades.service
        -p ActiveState -p SubState -p LoadState -p UnitFileState
      register: uu_show
      changed_when: false

    - name: Print service state
      ansible.builtin.debug:
        msg: "{{ uu_show.stdout }}"

    - name: Show apt timer status
      ansible.builtin.command: "systemctl status {{ item }} --no-pager"
      loop: "{{ uu_timers }}"
      register: timer_status
      changed_when: false

    - name: Print timer status
      ansible.builtin.debug:
        msg: "{{ item.stdout }}"
      loop: "{{ timer_status.results }}"

    - name: Collect recent unattended-upgrades logs from journald
      ansible.builtin.command: >
        journalctl -u unattended-upgrades
        --since "{{ uu_log_since }}"
        --no-pager
      register: uu_logs
      changed_when: false
      failed_when: false

    - name: Read classic unattended-upgrades log file if present
      ansible.builtin.slurp:
        src: /var/log/unattended-upgrades/unattended-upgrades.log
      register: uu_filelog
      ignore_errors: true

    - name: Print unattended-upgrades logs (journald, truncated)
      ansible.builtin.debug:
        msg: "{{ uu_logs.stdout | default('no journald logs') | truncate(6000, end='...') }}"

    - name: Print unattended-upgrades logfile (truncated)
      when: uu_filelog is defined and uu_filelog.content is defined
      ansible.builtin.debug:
        msg: "{{ (uu_filelog.content | b64decode) | truncate(6000, end='...') }}"

  tasks:
    - name: Optionally stop unattended-upgrades service
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: unattended-upgrades.service
        state: stopped

    - name: Optionally stop apt timers
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: stopped
      loop: "{{ uu_timers }}"

    # Example maintenance window operations
    - name: Update apt cache with lock wait
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        lock_timeout: 300

    - name: Dist upgrade with lock wait
      ansible.builtin.apt:
        upgrade: dist
        lock_timeout: 300

  post_tasks:
    - name: Start apt timers after maintenance
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        state: started
      loop: "{{ uu_timers }}"

    - name: Start unattended-upgrades after maintenance
      when: uu_temp_stop
      ansible.builtin.systemd_service:
        name: unattended-upgrades.service
        state: started

    - name: Show next scheduled timers
      ansible.builtin.command: systemctl list-timers --all --no-pager
      register: list_timers
      changed_when: false

    - name: Print next timers (first 30 lines)
      ansible.builtin.debug:
        msg: "{{ list_timers.stdout.splitlines()[:30] | join('\n') }}"
        
