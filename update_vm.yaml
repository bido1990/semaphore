- name: Update Ubuntu Server VMs
  hosts: ubuntu_vms
  serial: 1                # Riavvia un host alla volta
  become: true
  become_method: sudo
  gather_facts: yes

  pre_tasks:
    - name: Show current SSH user
      debug:
        msg: Connected as {{ ansible_user_id }}

    - name: Wait for apt/dpkg locks to be released
      shell: |
        while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
              fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || \
              fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "APT lock detected. Waiting..."
          sleep 10
        done
      changed_when: false

    - name: Ensure sudo access
      assert:
        that:
          - ansible_user_id == 'root'
        fail_msg: Playbook must be run with sudo privileges.

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_cache_update

    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      register: apt_upgrade_result

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Log reboot start time
      command: date "+%Y-%m-%d %H:%M:%S"
      register: reboot_start
      when: reboot_required_file.stat.exists

    - name: Reboot server if required
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible"
        pre_reboot_delay: 0
        post_reboot_delay: 15
        reboot_timeout: 600
      when: reboot_required.stat.exists
      ignore_errors: true
    
    - name: Wait for server to come back online
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300
      when: reboot_required.stat.exists

    - name: Log reboot end time
      command: date "+%Y-%m-%d %H:%M:%S"
      register: reboot_end
      when: reboot_required_file.stat.exists

    - name: Show reboot duration
      debug:
        msg: >
          Host {{ inventory_hostname }} rebooted in {{
            ( (reboot_end.stdout | to_datetime('%Y-%m-%d %H:%M:%S')) -
              (reboot_start.stdout | to_datetime('%Y-%m-%d %H:%M:%S'))
            ).total_seconds() | int
          }} seconds.
      when: reboot_required_file.stat.exists
